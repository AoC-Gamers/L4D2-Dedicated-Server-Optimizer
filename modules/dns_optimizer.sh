#!/bin/bash

# DNS Optimizer Module for L4D2 Server Optimizer
# This module configures DNS servers for optimal network performance
# Supports multiple DNS providers with automatic backup and restoration

# Module metadata (will be read by the main script)
register_module() {
  MODULE_NAME="DNS Optimizer"
  MODULE_DESCRIPTION="Configure DNS servers for optimal network performance"
  MODULE_VERSION="1.0.0"
  MODULE_CATEGORY="network"
  MODULE_TIMEOUT=60
  MODULE_REQUIRES_REBOOT=false
  MODULE_ENVIRONMENT="both"
  MODULE_AUTHOR="L4D2 Optimizer Team"
  MODULE_GAME_IMPACT="Improves server connectivity and reduced latency for network operations. May reduce lag spikes caused by DNS lookups."
  MODULE_DOCUMENTATION_URL="https://github.com/AoC-Gamers/L4D2-Optimizer"
  
  # Dependencies
  MODULE_DEPENDENCIES=()  # No module dependencies
  MODULE_REQUIRED_PACKAGES=()  # No additional packages required
  
  # Environment variables used by this module
  MODULE_ENV_VARIABLES=("NETWORK_DNS_PROVIDER" "NETWORK_DNS_CUSTOM_PRIMARY" "NETWORK_DNS_CUSTOM_SECONDARY")
  
  # Backup configuration
  MODULE_REQUIRES_BACKUP=true
  MODULE_BACKUP_FILES=("/etc/resolv.conf" "/etc/systemd/resolved.conf")
  MODULE_BACKUP_COMMANDS=("systemctl is-active systemd-resolved" "resolvectl status")
}

# DNS provider configurations
declare -A DNS_PROVIDERS=(
  ["google"]="8.8.8.8 8.8.4.4"
  ["cloudflare"]="1.1.1.1 1.0.0.1"
  ["opendns"]="208.67.222.222 208.67.220.220"
  ["quad9"]="9.9.9.9 149.112.112.112"
  ["custom"]="custom"  # Special value for custom DNS
)

# DNS provider descriptions
declare -A DNS_DESCRIPTIONS=(
  ["google"]="Google Public DNS - Fast and reliable DNS service"
  ["cloudflare"]="Cloudflare DNS - Privacy-focused and fast DNS service"
  ["opendns"]="OpenDNS - DNS with optional content filtering and security"
  ["quad9"]="Quad9 DNS - Security-focused DNS with malware blocking"
  ["custom"]="Custom DNS - User-defined DNS servers"
)

# Function to log messages
log_dns() {
  local type="$1"
  local message="$2"
  log_message "DNS_OPTIMIZER" "$type" "$message"
}

# Function to debug log
debug_dns() {
  local message="$1"
  local function_name="${2:-main}"
  debug_log "DNS_OPTIMIZER" "$message" "$function_name"
}

# Function to backup current DNS configuration
backup_dns_config() {
  debug_dns "Starting DNS configuration backup" "backup_dns_config"
  
  local backup_dir="$OPTIMIZER_DATA_DIR/backups/dns_optimizer"
  mkdir -p "$backup_dir" 2>/dev/null
  
  local timestamp=$(date +%Y%m%d_%H%M%S)
  
  # Backup /etc/resolv.conf
  if [[ -f /etc/resolv.conf ]]; then
    cp /etc/resolv.conf "$backup_dir/resolv.conf.backup.$timestamp"
    log_dns "INFO" "Backed up /etc/resolv.conf"
    debug_dns "Backed up resolv.conf to $backup_dir/resolv.conf.backup.$timestamp" "backup_dns_config"
  fi
  
  # Backup systemd-resolved configuration if exists
  if [[ -f /etc/systemd/resolved.conf ]]; then
    cp /etc/systemd/resolved.conf "$backup_dir/resolved.conf.backup.$timestamp"
    log_dns "INFO" "Backed up /etc/systemd/resolved.conf"
    debug_dns "Backed up resolved.conf to $backup_dir/resolved.conf.backup.$timestamp" "backup_dns_config"
  fi
  
  # Save systemd-resolved status if active
  if systemctl is-active systemd-resolved >/dev/null 2>&1; then
    systemctl status systemd-resolved > "$backup_dir/systemd-resolved.status.$timestamp" 2>&1
    resolvectl status > "$backup_dir/resolvectl.status.$timestamp" 2>&1
    debug_dns "Saved systemd-resolved status" "backup_dns_config"
  fi
  
  log_dns "SUCCESS" "DNS configuration backed up successfully"
}

# Function to detect current DNS method
detect_dns_method() {
  debug_dns "Detecting current DNS configuration method" "detect_dns_method"
  
  # Check if systemd-resolved is active
  if systemctl is-active systemd-resolved >/dev/null 2>&1; then
    debug_dns "Detected systemd-resolved as active DNS method" "detect_dns_method"
    echo "systemd-resolved"
    return 0
  fi
  
  # Check if NetworkManager is managing DNS
  if systemctl is-active NetworkManager >/dev/null 2>&1 && [[ -f /etc/NetworkManager/NetworkManager.conf ]]; then
    if grep -q "dns=.*" /etc/NetworkManager/NetworkManager.conf 2>/dev/null; then
      debug_dns "Detected NetworkManager as DNS method" "detect_dns_method"
      echo "networkmanager"
      return 0
    fi
  fi
  
  # Default to traditional resolv.conf
  debug_dns "Using traditional resolv.conf method" "detect_dns_method"
  echo "resolv.conf"
}

# Function to configure DNS via resolv.conf
configure_resolv_conf() {
  local primary_dns="$1"
  local secondary_dns="$2"
  
  debug_dns "Configuring DNS via resolv.conf: primary=$primary_dns, secondary=$secondary_dns" "configure_resolv_conf"
  
  # Create new resolv.conf content
  local resolv_content="# Generated by L4D2 Server Optimizer - DNS Module
# $(date)
# Primary DNS: $primary_dns
# Secondary DNS: $secondary_dns

nameserver $primary_dns"
  
  if [[ -n "$secondary_dns" && "$secondary_dns" != "$primary_dns" ]]; then
    resolv_content+="
nameserver $secondary_dns"
  fi
  
  # Add common options for better performance
  resolv_content+="

# DNS resolution options
options timeout:2 attempts:3 rotate
options single-request-reopen"
  
  # Write new configuration
  echo "$resolv_content" > /etc/resolv.conf
  
  # Make resolv.conf immutable to prevent overwrites
  chattr +i /etc/resolv.conf 2>/dev/null || true
  
  log_dns "SUCCESS" "DNS configured via resolv.conf: $primary_dns, $secondary_dns"
  debug_dns "Successfully wrote new resolv.conf configuration" "configure_resolv_conf"
}

# Function to configure DNS via systemd-resolved
configure_systemd_resolved() {
  local primary_dns="$1"
  local secondary_dns="$2"
  
  debug_dns "Configuring DNS via systemd-resolved: primary=$primary_dns, secondary=$secondary_dns" "configure_systemd_resolved"
  
  # Prepare DNS string
  local dns_string="$primary_dns"
  if [[ -n "$secondary_dns" && "$secondary_dns" != "$primary_dns" ]]; then
    dns_string="$primary_dns $secondary_dns"
  fi
  
  # Backup original resolved.conf
  if [[ ! -f /etc/systemd/resolved.conf.bak ]]; then
    cp /etc/systemd/resolved.conf /etc/systemd/resolved.conf.bak
  fi
  
  # Configure systemd-resolved
  cat > /etc/systemd/resolved.conf << EOF
# Generated by L4D2 Server Optimizer - DNS Module
# $(date)

[Resolve]
DNS=$dns_string
FallbackDNS=8.8.8.8 1.1.1.1
Domains=~.
DNSSEC=no
DNSOverTLS=no
Cache=yes
DNSStubListener=yes
ReadEtcHosts=yes
EOF
  
  # Restart systemd-resolved
  systemctl restart systemd-resolved
  
  # Update /etc/resolv.conf symlink
  ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
  
  log_dns "SUCCESS" "DNS configured via systemd-resolved: $dns_string"
  debug_dns "Successfully configured systemd-resolved and restarted service" "configure_systemd_resolved"
}

# Function to apply DNS configuration
apply_dns_config() {
  local provider="$1"
  local custom_primary="$2"
  local custom_secondary="$3"
  
  debug_dns "Applying DNS configuration: provider=$provider" "apply_dns_config"
  
  local primary_dns=""
  local secondary_dns=""
  
  # Get DNS servers based on provider
  if [[ "$provider" == "custom" ]]; then
    if [[ -z "$custom_primary" ]]; then
      log_dns "ERROR" "Custom DNS provider selected but no primary DNS specified"
      return 1
    fi
    primary_dns="$custom_primary"
    secondary_dns="$custom_secondary"
    debug_dns "Using custom DNS: primary=$primary_dns, secondary=$secondary_dns" "apply_dns_config"
  else
    if [[ -z "${DNS_PROVIDERS[$provider]:-}" ]]; then
      log_dns "ERROR" "Unknown DNS provider: $provider"
      return 1
    fi
    
    local dns_servers="${DNS_PROVIDERS[$provider]}"
    primary_dns=$(echo "$dns_servers" | awk '{print $1}')
    secondary_dns=$(echo "$dns_servers" | awk '{print $2}')
    debug_dns "Using predefined DNS provider '$provider': primary=$primary_dns, secondary=$secondary_dns" "apply_dns_config"
  fi
  
  # Validate DNS addresses
  if ! [[ "$primary_dns" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    log_dns "ERROR" "Invalid primary DNS address: $primary_dns"
    return 1
  fi
  
  if [[ -n "$secondary_dns" ]] && ! [[ "$secondary_dns" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    log_dns "ERROR" "Invalid secondary DNS address: $secondary_dns"
    return 1
  fi
  
  # Detect DNS configuration method
  local dns_method=$(detect_dns_method)
  log_dns "INFO" "Using DNS configuration method: $dns_method"
  
  # Apply configuration based on method
  case "$dns_method" in
    "systemd-resolved")
      configure_systemd_resolved "$primary_dns" "$secondary_dns"
      ;;
    "resolv.conf"|*)
      configure_resolv_conf "$primary_dns" "$secondary_dns"
      ;;
  esac
  
  # Test DNS resolution
  test_dns_resolution "$primary_dns"
}

# Function to test DNS resolution
test_dns_resolution() {
  local dns_server="$1"
  
  debug_dns "Testing DNS resolution with server: $dns_server" "test_dns_resolution"
  log_dns "INFO" "Testing DNS resolution..."
  
  # Test with a known domain
  local test_domain="google.com"
  
  if nslookup "$test_domain" "$dns_server" >/dev/null 2>&1; then
    log_dns "SUCCESS" "DNS resolution test passed for $test_domain"
    debug_dns "DNS resolution successful for $test_domain using $dns_server" "test_dns_resolution"
    return 0
  else
    log_dns "WARNING" "DNS resolution test failed for $test_domain"
    debug_dns "DNS resolution failed for $test_domain using $dns_server" "test_dns_resolution"
    return 1
  fi
}

# Function to show current DNS configuration
show_current_dns() {
  log_dns "INFO" "Current DNS Configuration:"
  
  # Show resolv.conf content
  if [[ -f /etc/resolv.conf ]]; then
    echo "📄 /etc/resolv.conf content:"
    while IFS= read -r line; do
      if [[ "$line" =~ ^nameserver[[:space:]]+([0-9a-fA-F.:]+) ]]; then
        echo "  └─ DNS Server: ${BASH_REMATCH[1]}"
      fi
    done < /etc/resolv.conf
  fi
  
  # Show systemd-resolved status if active
  if systemctl is-active systemd-resolved >/dev/null 2>&1; then
    echo "🔧 systemd-resolved is active"
    local resolved_dns=$(resolvectl status 2>/dev/null | grep "DNS Servers:" | head -1 | sed 's/.*DNS Servers: *//' || echo "Unable to query")
    echo "  └─ Resolved DNS: $resolved_dns"
  fi
}

# Function to restore DNS configuration
restore_dns_config() {
  debug_dns "Starting DNS configuration restoration" "restore_dns_config"
  
  local backup_dir="$OPTIMIZER_DATA_DIR/backups/dns_optimizer"
  
  if [[ ! -d "$backup_dir" ]]; then
    log_dns "ERROR" "No backup directory found: $backup_dir"
    return 1
  fi
  
  # Find latest backup
  local latest_resolv=$(ls -t "$backup_dir"/resolv.conf.backup.* 2>/dev/null | head -1)
  local latest_resolved=$(ls -t "$backup_dir"/resolved.conf.backup.* 2>/dev/null | head -1)
  
  # Restore resolv.conf
  if [[ -n "$latest_resolv" && -f "$latest_resolv" ]]; then
    chattr -i /etc/resolv.conf 2>/dev/null || true
    cp "$latest_resolv" /etc/resolv.conf
    log_dns "SUCCESS" "Restored /etc/resolv.conf from backup"
    debug_dns "Restored resolv.conf from $latest_resolv" "restore_dns_config"
  fi
  
  # Restore systemd-resolved if backup exists
  if [[ -n "$latest_resolved" && -f "$latest_resolved" ]]; then
    cp "$latest_resolved" /etc/systemd/resolved.conf
    systemctl restart systemd-resolved 2>/dev/null || true
    log_dns "SUCCESS" "Restored systemd-resolved configuration from backup"
    debug_dns "Restored resolved.conf from $latest_resolved" "restore_dns_config"
  fi
  
  log_dns "SUCCESS" "DNS configuration restored from backup"
}

# Main execution function
main() {
  debug_dns "DNS Optimizer module started" "main"
  log_dns "INFO" "Starting DNS optimization..."
  
  # Show current configuration
  show_current_dns
  echo
  
  # Get DNS provider from environment variable
  local dns_provider="${NETWORK_DNS_PROVIDER:-cloudflare}"
  local custom_primary="${NETWORK_DNS_CUSTOM_PRIMARY:-}"
  local custom_secondary="${NETWORK_DNS_CUSTOM_SECONDARY:-}"
  
  debug_dns "Configuration from environment: provider=$dns_provider, custom_primary=$custom_primary, custom_secondary=$custom_secondary" "main"
  
  # Show selected provider info
  log_dns "INFO" "Selected DNS Provider: $dns_provider"
  if [[ -n "${DNS_DESCRIPTIONS[$dns_provider]:-}" ]]; then
    echo "📝 Description: ${DNS_DESCRIPTIONS[$dns_provider]}"
  fi
  
  if [[ "$dns_provider" == "custom" ]]; then
    echo "🔧 Custom DNS Servers: Primary=$custom_primary, Secondary=$custom_secondary"
  else
    echo "🔧 DNS Servers: ${DNS_PROVIDERS[$dns_provider]}"
  fi
  echo
  
  # Backup current configuration
  backup_dns_config
  
  # Apply new DNS configuration
  if apply_dns_config "$dns_provider" "$custom_primary" "$custom_secondary"; then
    echo
    log_dns "SUCCESS" "DNS optimization completed successfully!"
    
    # Show new configuration
    echo
    show_current_dns
    
    # Performance recommendations
    echo
    log_dns "INFO" "DNS Performance Tips:"
    echo "  💡 Monitor DNS response times with: dig @<dns_server> google.com"
    echo "  💡 Test different providers to find the fastest for your location"
    echo "  💡 Consider using local DNS caching (dnsmasq, unbound) for better performance"
    
  else
    log_dns "ERROR" "DNS optimization failed!"
    echo
    log_dns "INFO" "Attempting to restore previous configuration..."
    restore_dns_config
    return 1
  fi
  
  debug_dns "DNS Optimizer module completed successfully" "main"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
